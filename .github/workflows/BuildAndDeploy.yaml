name: Build, Test JAR and Create Image

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test JAR Artifact - Create Image and Push to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set Up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
      
    - name: Maven Build JAR Artifact 
      run: mvn -f app/pom.xml -B clean package

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to AWS ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    - name: Create ECR Repo
      run: |
        set +e
        aws ecr describe-repositories --repository-names "${{ github.event.repository.name }}" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "O repositório já existe."
        else
          aws ecr create-repository --repository-name "${{ github.event.repository.name }}"
        fi

    - name: Build and Push to ECR
      uses: docker/build-push-action@v5
      with:
        context: app
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}, ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}:latest
      env:
        ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        TAG_LATEST: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}:${{ github.sha }}
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
        
  terraform:
    name: 'Terraform Set Up Deploy'
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set Deploy Dir
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "DEPLOY_DIR=dev" >> $GITHUB_ENV
          else
            echo "DEPLOY_DIR=prod" >> $GITHUB_ENV
          fi

      - name: Use Deploy Dir
        run: |
          echo "Deploy directory is $DEPLOY_DIR"

      - name: Terraform Init
        run: |
          cd infra/${{ env.DEPLOY_DIR }}
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/${{ env.DEPLOY_DIR }}
          terraform plan -var-file=terraform.tfvars

        continue-on-error: true

      - name: Check Destroy flag 
        id: check_destroy
        run: |
          cd infra
          content=$(jq -r .destroy cleaning.json)
          if [[ $content == "true" ]]; then
            echo "::set-output name=destroy::true"
          else
            echo "::set-output name=destroy::false"
          fi

      - name: Terraform Apply
        if: steps.check_destroy.outputs.destroy == 'false'
        run: |
          cd infra/${{ env.DEPLOY_DIR }}
          terraform apply -var-file=terraform.tfvars -auto-approve

      - name: Terraform Destroy
        if: steps.check_destroy.outputs.destroy == 'true'
        run: |
          cd infra/${{ env.DEPLOY_DIR }}
          terraform destroy -var-file=terraform.tfvars -auto-approve

  kubernetes:
    name: EKS Auth And Helm Deploy
    runs-on: ubuntu-latest
    needs:
      - build
      - terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kube config
      run: aws eks update-kubeconfig --name app-eks-cluster --region us-east-1 || kubectl get nodes

    - name: Get Docker Image Version
      id: docker_image_version
      run: echo "::set-output name=docker_version::$(echo ${{ github.sha }} | cut -c1-7)"

    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: 'latest'

    - name: Update Chart.yaml
      run: |
        sed -i "s/^version:.*/version: $VERSION/" helm/Chart.yaml
      env:
        VERSION: ${{ github.run_number }}

    - name: Deploy with Helm
      run: helm upgrade --install app  ./helm